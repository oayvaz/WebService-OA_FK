<?php

require_once "Financement.php";
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-03 at 15:35:00.
 */
class FinancementTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Financement
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Financement;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Financement::_construct
     * @todo   Implement test_construct().
     */
    public function test_construct()
    {
        // Remove the following lines when you implement this test.
        $this->assertTrue($this->object != null, "Test du constructeur échoué");
    }

    /**
     * @covers Financement::calculMensualiteCredit
     * @todo   Implement testCalculMensualiteCredit().
     */
    public function testCalculMensualiteCredit()
    {
        $this->object->setApport(100000);
        $this->object->setAge(33);
        $this->object->setDuree(10);
        $this->object->setMontant(200000);
        /**
         * Le scénario déroulé est le suivant :
         * Taux de base pour 100000 euros emprunté à un âge de 33 ans, le taux est de 2.75
         * L'apport perso est > à 50%, on a donc 0.2 de réduction soit 2.55%
         * L'assurance est de 0.35% pour cet âge
         * Le montant attendu est donc de :
         *      - 944.97 hors assurance
         *      - 960.99 assurance incluse
         * Le test va donc vérifier ce cas particulier pour commencer.
         * Il faudra faire de même pour les différents cas de figure afin de "blinder" le test
         */
        $this->assertTrue($this->object->calculMensualiteCredit() == 944.97, "Echec du calcul de la mensualité");
    }

    /**
     * @covers Financement::calculMensualiteAssurance
     * @todo   Implement testCalculMensualiteAssurance().
     */
    public function testCalculMensualiteAssurance()
    {
        $this->object->setApport(100000);
        $this->object->setAge(33);
        $this->object->setDuree(10);
        $this->object->setMontant(200000);
        /**
         * Le scénario déroulé est le suivant :
         * Taux de base pour 100000 euros emprunté à un âge de 33 ans, le taux est de 2.75
         * L'apport perso est > à 50%, on a donc 0.2 de réduction soit 2.55%
         * L'assurance est de 0.35% pour cet âge
         * Le montant attendu est donc de :
         *      - 944.97 hors assurance
         *      - 960.99 assurance incluse
         * Le test va donc vérifier ce cas particulier pour commencer.
         * Il faudra faire de même pour les différents cas de figure afin de "blinder" le test
         */
        $this->assertTrue($this->object->calculMensualiteAssurance() == number_format(944.97*0.35/100,2), "Echec du calcul de la mensualité de l'assurance");
    }

    /**
     * @covers Financement::calculMensualiteGlobale
     * @todo   Implement testCalculMensualiteGlobale().
     */
    public function testCalculMensualiteGlobale()
    {
        $this->object->setApport(100000);
        $this->object->setAge(33);
        $this->object->setDuree(10);
        $this->object->setMontant(200000);
        /**
         * Le scénario déroulé est le suivant :
         * Taux de base pour 100000 euros emprunté à un âge de 33 ans, le taux est de 2.75
         * L'apport perso est > à 50%, on a donc 0.2 de réduction soit 2.55%
         * L'assurance est de 0.35% pour cet âge
         * Le montant attendu est donc de :
         *      - 944.97 hors assurance
         *      - 960.99 assurance incluse
         * Le test va donc vérifier ce cas particulier pour commencer.
         * Il faudra faire de même pour les différents cas de figure afin de "blinder" le test
         */
        $this->assertTrue($this->object->calculMensualiteGlobale() == (number_format(944.97*0.35/100,2)+944.97), "Echec du calcul de la mensualité globale");
    }
}
